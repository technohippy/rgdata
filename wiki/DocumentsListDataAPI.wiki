#summary Documents List Data API.
#labels Phase-Implementation,Featured

Ref. http://code.google.com/intl/en/apis/documents/docs/2.0/developers_guide_protocol.html

= Authentication =
[Authentication]

= Retrieving a list of documents =
{{{
service = RGData::DocumentsList::Service.new
client = service.login 'RGData.Library@gmail.com', 'rgdatatest'
response = client.list
response.code # => 200
documents = response.body
documents.totalResults # => the number of your docs
documents.entry[0].author.name # => 'RGData.Library'
}}}

= Uploading documents =
{{{
# Upload an existing document
service = RGData::DocumentsList::Service.new
client = service.login 'RGData.Library@gmail.com', 'rgdatatest'
title = 'Uploaded Document'
filepath = "./documents_list_upload.csv" 
response = client.upload title, :filepath => filepath
response.code # => 201
entry = response.body
entry.author.name # => 'RGData.Library' 
}}}

{{{
# Create new document
service = RGData::DocumentsList::Service.new
client = service.login 'RGData.Library@gmail.com', 'rgdatatest'
title = 'New Document'
response = client.upload title
response.code # => 201
entry = response.body
entry.author.name # => 'RGData.Library' 
}}}

= Updating documents =
{{{
list_response = @client.list
entry = list_response.body.entry.first
entry.title = 'updated title'
entry.update!
}}}

{{{
list_response = @client.list
entry = list_response.body.entry.first
@client.update(entry, :title => 'updated')
}}}

= Creating a folder =
{{{
@client.create_folder('New Folder')
}}}

= Trashing documents and folders =
trash if not changed
{{{
entry.delete
}}}

{{{
@client.trash(entry)
}}}

trash anyway
{{{
entry.delete :force => true
}}}

{{{
@client.trash(entry, :force => true)
}}}

= Retrieveing a list of documents =
{{{
@client.retrieve :category => 'document'
}}}

{{{
@client.retrieve :category => ['presentation', 'starred']
}}}

{{{
@client.retrieve :category => {'starred' => 'RGData.Library@gmail.com'}
}}}

{{{
@client.retrieve :query => 'example query'
}}}

{{{
@client.retrieve :show_folders => true
}}}